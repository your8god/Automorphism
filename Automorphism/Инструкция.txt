На вход подается последовательность (input.txt), элнменты перечислены через ;
Например: 00; 01; 10; 110; 1110; 1111

Считывается оттуда только первая строчка, их сейчас там несколько, это для теста разных графов. Если захочешь тот или иной прогнать, то вставить его в первую строку

На выходе 2 файла - в одном граф в виде списка смежности, номера вершин прога сама генерит, ну и строит собственно - это чтобы понятнее было, что за граф у нас на входе (outTree.txt)
Пример файла:
0: 1 4 
1: 0 2 3 
2: 1 
3: 1 
4: 0 5 6 
5: 4 
6: 4 7 8 
7: 6 
8: 6 9 10 
9: 8 
10: 8 

Номера вершин генерируются следующим образом: корневая вершина всегда имеет метку 0, остальные вершины 
получают соответствующие метки в порядке обхода входной последовательности - слева направо.
Т.е., например, если взять вход 00; 01; 10; 11 то сначала свои метки получат вершины из ветки 00, потом из 01 и 10. Здесь левая вершина, смежная с корнем, получит метку 1, ее дочерняя левая вершина получит метку 2, дочерняя правая - 3. Правая вершина, смежная с корнем, получит метку 4, ее дочерняя левая - 5, дочерняя правая - 6.

  	  0
    /   \
   1     4
  / \   / \
 2   3 5   6

Если поменять местами элементы во входной последовательности, то метки вершин не изменятся, поскольку перед пометкой происходит лексикографическое сравнение строк.
 
Во втором файле (automorphism.txt) выводится список всех полученных автоморфизмов.

P.S. На симметричных деревьях программа пока работает некорректно (находит не все автоморфизмы)